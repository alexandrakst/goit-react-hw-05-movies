{"version":3,"file":"static/js/379.11b14de6.chunk.js","mappings":"+SAEMA,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFtC,cACCG,EADD,yBAKEA,EAASC,KAAKC,SALhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BO,IAFjD,cACCJ,EADD,yBAKEA,EAASC,KAAKC,SALhB,kEAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACkBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDU,EADC,4BACqBT,IAFvC,cACCG,EADD,yBAKEA,EAASC,KAAKM,MALhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBF,GAAzB,uFACkBP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BU,EAA9B,oBAA4CT,IAD9D,cACCG,EADD,yBAGEA,EAASC,MAHX,kEAMA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA2BH,GAA3B,uFACkBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDU,EADC,4BACqBT,IAFvC,cACCG,EADD,yBAKEA,EAASC,KAAKC,SALhB,kE,8ICjCQ,SAASQ,EAAT,GAA+B,IAUxBC,EAVcC,EAAS,EAATA,MAEnBC,EAMXD,EANFE,YACAC,EAKEH,EALFG,MACcC,EAIZJ,EAJFK,aACAC,EAGEN,EAHFM,SACcC,EAEZP,EAFFQ,aACAC,EACET,EADFS,OAOF,OACE,4BACE,gBACEC,IAAG,8CAAyCT,GAC5CU,IAAKR,EACLS,OAAO,SAET,4BACE,0BACGT,EADH,MAZcJ,EAaUK,EAZf,IAAIS,KAAKd,GACVe,eAUR,QAGA,yCACc,0BAAOP,QAErB,sCACA,uBAAID,KACJ,oCACA,8BAAIG,QAAJ,IAAIA,OAAJ,EAAIA,EAAQM,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,EAAMC,KAAO,GAAnC,GAAwC,WAIlE,C,aChCc,SAASC,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOpB,EAAP,KAAcqB,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OAElBC,GAAsBF,EAAAA,EAAAA,QAAOD,EAASI,OAEtCC,EAAY,mCAAG,WAAMP,GAAN,0EACdA,EADc,2EAIO1B,EAAAA,EAAAA,IAAU0B,GAJjB,OAIXQ,EAJW,OAKjBT,EAASS,GALQ,gDAOjBC,QAAQC,IAAR,MAPiB,yDAAH,sDAelB,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,EAAaP,EACd,GAAE,CAACA,KAGF,gCACGtB,IACC,4BACE,SAAC,KAAD,CACEkC,GAAIP,EAAoBQ,QAAUR,EAAoBQ,QAAU,IADlE,sBAKA,SAACrC,EAAD,CAAWE,MAAOA,QAGtB,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMkC,GAAE,kBAAaZ,EAAb,SAAR,qBAEF,yBACE,SAAC,KAAD,CAAMY,GAAE,kBAAaZ,EAAb,YAAR,8BAIN,SAAC,EAAAc,SAAD,WACE,SAAC,KAAD,QAIP,C","sources":["api/Api.js","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '931e7fb1a09f8bcd023c19a0e53dc26e';\n\nexport async function trendingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n}\n\nexport async function movieQuerySearch(query) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return response.data.results;\n}\n\nexport async function creditsById(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data.cast;\n}\n\nexport async function movieById(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function reviewsById(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n}\n","import PropTypes from 'prop-types';\n\nexport default function MovieInfo({ movie }) {\n  const {\n    poster_path: posterPath,\n    title,\n    release_date: releaseDate,\n    overview,\n    vote_average: voteAverage,\n    genres,\n  } = movie;\n\n  const getFullYear = dateString => {\n    const date = new Date(dateString);\n    return date.getFullYear();\n  };\n  return (\n    <div>\n      <img\n        src={`https://image.tmdb.org/t/p/original/${posterPath}`}\n        alt={title}\n        height=\"348\"\n      />\n      <div>\n        <h2>\n          {title} ({getFullYear(releaseDate)})\n        </h2>\n        <p>\n          User Score: <span>{voteAverage}</span>\n        </p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genres?.reduce((acc, genre) => acc + genre.name + ' ', '')}</p>\n      </div>\n    </div>\n  );\n}\n\nMovieInfo.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import { Suspense, useEffect, useState, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { movieById } from 'api/Api';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useRef(useLocation());\n\n  const backLinkLocationRef = useRef(location.state);\n\n  const getMovieInfo = async movieId => {\n    if (!movieId) return;\n\n    try {\n      const movieInfo = await movieById(movieId);\n      setMovie(movieInfo);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getMovieInfo(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {movie && (\n        <div>\n          <Link\n            to={backLinkLocationRef.current ? backLinkLocationRef.current : '/'}\n          >\n            Go back\n          </Link>\n          <MovieInfo movie={movie} />\n        </div>\n      )}\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to={`/movies/${movieId}/cast`}>Cast</Link>\n          </li>\n          <li>\n            <Link to={`/movies/${movieId}/reviews`}>Reviews</Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","trendingMovies","axios","response","data","results","movieQuerySearch","query","creditsById","id","cast","movieById","reviewsById","MovieInfo","dateString","movie","posterPath","poster_path","title","releaseDate","release_date","overview","voteAverage","vote_average","genres","src","alt","height","Date","getFullYear","reduce","acc","genre","name","MovieDetails","useState","setMovie","movieId","useParams","location","useRef","useLocation","backLinkLocationRef","state","getMovieInfo","movieInfo","console","log","useEffect","to","current","Suspense"],"sourceRoot":""}